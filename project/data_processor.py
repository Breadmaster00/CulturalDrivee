import numpy as np
import pandas as pd
from sklearn.preprocessing import LabelEncoder, StandardScaler
from datetime import datetime
import matplotlib.pyplot as plt
import seaborn as sns
import os
from config import CalculatorConfig  # –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥–∞

class DataProcessor:
    def __init__(self):
        self.label_encoders = {}
        self.price_stats = {}
        self.scaler = StandardScaler()
        self.is_scaler_fitted = False
        os.makedirs(CalculatorConfig.VISUALIZATION_DIR, exist_ok=True)
    
    def prepare_features(self, df):
        df = df.copy()
        
        print("üîç –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV...")
        print(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {df.shape}")
        
        missing_columns = [col for col in CalculatorConfig.REQUIRED_COLUMNS if col not in df.columns]
        if missing_columns:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}")
            return None
        
        try:
            df['order_timestamp'] = pd.to_datetime(df['order_timestamp'])
            df['hour'] = df['order_timestamp'].dt.hour
            df['day_of_week'] = df['order_timestamp'].dt.dayofweek
            df['month'] = df['order_timestamp'].dt.month
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç: {e}")
            return None
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π feature engineering
        df['price_ratio'] = df['price_bid_local'] / df['price_start_local'].clip(lower=1)
        df['distance_per_minute'] = df['distance_in_meters'] / (df['duration_in_seconds'] / 60).clip(lower=1)
        df['pickup_time_ratio'] = df['pickup_in_seconds'] / df['duration_in_seconds'].clip(lower=1)
        
        for col in CalculatorConfig.CATEGORICAL_COLUMNS:
            if col not in self.label_encoders:
                self.label_encoders[col] = LabelEncoder()
                df[col] = df[col].fillna('unknown')
                self.label_encoders[col].fit(df[col])
            
            df[f'{col}_encoded'] = self.label_encoders[col].transform(df[col])
        
        df['is_done'] = df['is_done'].map({'done': 1, 'cancel': 0})
        
        self.price_stats = {
            'min_price': float(df['price_bid_local'].min()),
            'max_price': float(df['price_bid_local'].max()),
            'mean_price': float(df['price_bid_local'].mean()),
            'std_price': float(df['price_bid_local'].std()),
            'q25': float(df['price_bid_local'].quantile(0.25)),
            'q75': float(df['price_bid_local'].quantile(0.75)),
            'mean_increase_pct': float(((df['price_bid_local'] / df['price_start_local'] - 1) * 100).mean())
        }
        
        print(f"üéØ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {df['is_done'].sum()} –∏–∑ {len(df)} ({df['is_done'].mean():.1%})")
        print(f"üí∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–µ–Ω: {self.price_stats['min_price']:.0f}-{self.price_stats['max_price']:.0f} —Ä—É–±")
        print(f"üìà –°—Ä–µ–¥–Ω–µ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ü–µ–Ω—ã: {self.price_stats['mean_increase_pct']:.1f}%")
        
        self._perform_data_analysis(df)
        
        return df
    
    def _perform_data_analysis(self, df):
        print("\nüìä –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è
        corr = df[CalculatorConfig.FEATURE_COLUMNS + ['is_done']].corr()
        plt.figure(figsize=(12, 10))
        sns.heatmap(corr, annot=True, cmap='coolwarm', fmt='.2f')
        plt.title('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞')
        plt.savefig(os.path.join(CalculatorConfig.VISUALIZATION_DIR, 'correlation_heatmap.png'))
        plt.close()
        
        # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
        hourly_acceptance = df.groupby('hour')['is_done'].mean()
        plt.figure(figsize=(10, 6))
        hourly_acceptance.plot(kind='bar')
        plt.title('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ —á–∞—Å–∞–º')
        plt.ylabel('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å')
        plt.savefig(os.path.join(CalculatorConfig.VISUALIZATION_DIR, 'hourly_acceptance.png'))
        plt.close()
        
        # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        weekly_acceptance = df.groupby('day_of_week')['is_done'].mean()
        plt.figure(figsize=(10, 6))
        weekly_acceptance.plot(kind='bar')
        plt.title('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏')
        plt.ylabel('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å')
        plt.savefig(os.path.join(CalculatorConfig.VISUALIZATION_DIR, 'weekly_acceptance.png'))
        plt.close()
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ü–µ–Ω—ã
        df['price_increase_pct'] = (df['price_bid_local'] / df['price_start_local'] - 1) * 100
        accepted_increase = df[df['is_done'] == 1]['price_increase_pct']
        plt.figure(figsize=(10, 6))
        sns.histplot(accepted_increase, kde=True)
        plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è –ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞–∫–∞–∑–æ–≤')
        plt.xlabel('–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ü–µ–Ω—ã (%)')
        plt.savefig(os.path.join(CalculatorConfig.VISUALIZATION_DIR, 'price_increase_distribution.png'))
        plt.close()
        
        print(f"üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {CalculatorConfig.VISUALIZATION_DIR}")
        print(f"üîë –ö–ª—é—á–µ–≤—ã–µ insights:")
        print(f"   - –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Ü–µ–Ω—ã –∏ –ø—Ä–∏–Ω—è—Ç–∏—è: {corr['is_done']['price_bid_local']:.2f}")
        print(f"   - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤ —á–∞—Å: {hourly_acceptance.idxmax()} ({hourly_acceptance.max():.1%})")
        print(f"   - –°—Ä–µ–¥–Ω–µ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–Ω—è—Ç—ã—Ö: {accepted_increase.mean():.1f}%")
    
    def prepare_order_features(self, order_data):
        features = {
            'distance_in_meters': float(order_data.get('distance_in_meters', 0)),
            'duration_in_seconds': float(order_data.get('duration_in_seconds', 0)),
            'pickup_in_meters': float(order_data.get('pickup_in_meters', 0)),
            'pickup_in_seconds': float(order_data.get('pickup_in_seconds', 0)),
            'price_start_local': float(order_data.get('price_start_local', 0)),
            'price_bid_local': float(order_data.get('price_bid_local', order_data.get('price_start_local', 0))),
            'driver_rating': float(order_data.get('driver_rating', 5.0)),
        }
        
        order_time = pd.to_datetime(order_data.get('order_timestamp', pd.Timestamp.now()))
        features['hour'] = int(order_time.hour)
        features['day_of_week'] = int(order_time.dayofweek)
        features['month'] = int(order_time.month)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏—á–∏
        features['price_ratio'] = float(features['price_bid_local'] / features['price_start_local'] if features['price_start_local'] > 0 else 1)
        features['distance_per_minute'] = float(features['distance_in_meters'] / (features['duration_in_seconds'] / 60) if features['duration_in_seconds'] > 0 else 0)
        features['pickup_time_ratio'] = float(features['pickup_in_seconds'] / features['duration_in_seconds'] if features['duration_in_seconds'] > 0 else 0)
        
        for col in CalculatorConfig.CATEGORICAL_COLUMNS:
            value = order_data.get(col, 'unknown')
            encoder_key = f'{col}_encoded'
            if col in self.label_encoders:
                try:
                    classes = list(self.label_encoders[col].classes_)
                    if value in classes:
                        features[encoder_key] = int(classes.index(value))
                    else:
                        features[encoder_key] = 0
                except:
                    features[encoder_key] = 0
            else:
                features[encoder_key] = 0
        
        return features
    
    def scale_features(self, X, fit=False):
        """–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏"""
        if fit:
            X_scaled = self.scaler.fit_transform(X)
            self.is_scaler_fitted = True
        else:
            if not self.is_scaler_fitted:
                raise ValueError("Scaler –Ω–µ –±—ã–ª –æ–±—É—á–µ–Ω! –°–Ω–∞—á–∞–ª–∞ –≤—ã–∑–æ–≤–∏—Ç–µ scale_features —Å fit=True")
            X_scaled = self.scaler.transform(X)
        return X_scaled