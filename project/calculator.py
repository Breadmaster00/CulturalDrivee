import numpy as np
import pandas as pd
from datetime import datetime
from config import CalculatorConfig  # –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥–∞
from price_optimizer import PriceOptimizer  # –ò–º–ø–æ—Ä—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
import os

class NeuralPriceCalculator:
    def __init__(self):
        self.price_optimizer = PriceOptimizer()
        self.is_model_loaded = False
        self.load_model()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å —Å—Ä–∞–∑—É –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    
    def load_model(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç)"""
        if os.path.exists(CalculatorConfig.MODEL_PATH) and os.path.exists(CalculatorConfig.SCALER_PATH):
            print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏...")
            self.is_model_loaded = self.price_optimizer.load_model()
            if self.is_model_loaded:
                print("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
            else:
                raise ValueError("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å")
        else:
            raise ValueError("üìù –ú–æ–¥–µ–ª—å –∏–ª–∏ —Å–∫–µ–π–ª–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç.")
    
    def calculate_optimal_price(self, order_data):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã —Å –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç—å—é (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ –Ω–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏)"""
        if not self.is_model_loaded:
            raise ValueError("–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
        
        order_features = self.price_optimizer.data_processor.prepare_order_features({
            'distance_in_meters': order_data.distance_in_meters,
            'duration_in_seconds': order_data.duration_in_seconds,
            'pickup_in_meters': order_data.pickup_in_meters,
            'pickup_in_seconds': order_data.pickup_in_seconds,
            'price_start_local': order_data.price_start_local,
            'driver_rating': order_data.driver_rating,
            'carname': order_data.carname,
            'carmodel': order_data.carmodel,
            'platform': order_data.platform,
            'order_timestamp': order_data.order_timestamp or datetime.now().isoformat()
        })
        
        current_price = order_data.current_price or order_data.price_start_local
        
        price_range = self._get_price_range_from_data(current_price)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç—Ä–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ + —Ç–µ–∫—É—â—É—é
        result = self._find_three_price_strategies(order_features, price_range, current_price)
        
        return result
    
    def _get_price_range_from_data(self, current_price):
        if self.price_optimizer.data_processor.price_stats:
            min_price = max(50, self.price_optimizer.data_processor.price_stats.get('min_price', 50))
            max_price = min(2000, self.price_optimizer.data_processor.price_stats.get('max_price', 1000))
            return (min_price, max_price)
        else:
            return (max(50, current_price * 0.5), min(1000, current_price * 2.0))
    
    def _find_three_price_strategies(self, order_features, price_range, current_price):
        min_price, max_price = price_range
        current_prob = self.price_optimizer.predict_probability(order_features, current_price)
        current_income = current_prob * current_price
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ü–µ–Ω
        test_prices = np.unique(np.logspace(np.log10(min_price), np.log10(max_price), num=50, dtype=int))
        test_prices = np.append(test_prices, current_price)
        test_prices = np.sort(np.unique(test_prices))
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º —Ü–µ–Ω–∞–º
        price_data = []
        for price in test_prices:
            prob = self.price_optimizer.predict_probability(order_features, price)
            income = prob * price
            price_data.append({
                'price': price,
                'probability': prob,
                'income': income
            })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–æ—Ö–æ–¥—É –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
        price_data_sorted_by_income = sorted(price_data, key=lambda x: x['income'], reverse=True)
        
        # 1. –¢–û–ß–ù–´–ô –≤–∞—Ä–∏–∞–Ω—Ç (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
        precise_data = max(price_data, key=lambda x: x['probability'])
        
        # 2. –£–ú–ï–†–ï–ù–ù–´–ô –≤–∞—Ä–∏–∞–Ω—Ç (–±–∞–ª–∞–Ω—Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∏ –¥–æ—Ö–æ–¥–∞)
        # –ò—â–µ–º —Ü–µ–Ω—ã —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –Ω–µ –º–µ–Ω–µ–µ 70% –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∏ –±–µ—Ä–µ–º —Ç—É, —É –∫–æ—Ç–æ—Ä–æ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥
        min_prob_for_moderate = precise_data['probability'] * 0.7
        moderate_candidates = [p for p in price_data if p['probability'] >= min_prob_for_moderate]
        if moderate_candidates:
            moderate_data = max(moderate_candidates, key=lambda x: x['income'])
        else:
            moderate_data = price_data_sorted_by_income[1] if len(price_data_sorted_by_income) > 1 else price_data_sorted_by_income[0]
        
        # 3. –†–ò–°–ö–û–í–ê–ù–ù–´–ô –≤–∞—Ä–∏–∞–Ω—Ç (–≤—ã—Å–æ–∫–∏–π –¥–æ—Ö–æ–¥, –Ω–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å < 50%)
        # –ò—â–µ–º —Ü–µ–Ω—ã —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é < 50% –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –¥–æ—Ö–æ–¥–æ–º
        risky_candidates = [p for p in price_data if p['probability'] < 0.5]
        if risky_candidates:
            risky_data = max(risky_candidates, key=lambda x: x['income'])
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ü–µ–Ω —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é < 50%, –±–µ—Ä–µ–º —Å–∞–º—É—é –≤—ã—Å–æ–∫—É—é —Ü–µ–Ω—É —Å —Ä–∞–∑—É–º–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
            risky_candidates = [p for p in price_data if p['probability'] > 0.3]
            if risky_candidates:
                risky_data = max(risky_candidates, key=lambda x: x['price'])
            else:
                risky_data = price_data_sorted_by_income[0]
        
        return {
            'precise': {
                'price': round(precise_data['price']),
                'probability': float(round(precise_data['probability'], 3)),
                'income': float(round(precise_data['income'], 2)),
                'description': '–ù–∞–∏–±–æ–ª—å—à–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞'
            },
            'moderate': {
                'price': round(moderate_data['price']),
                'probability': float(round(moderate_data['probability'], 3)),
                'income': float(round(moderate_data['income'], 2)),
                'description': '–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Ü–µ–Ω—ã –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏'
            },
            'risky': {
                'price': round(risky_data['price']),
                'probability': float(round(risky_data['probability'], 3)),
                'income': float(round(risky_data['income'], 2)),
                'description': '–í—ã—Å–æ–∫–∏–π –¥–æ—Ö–æ–¥ –ø—Ä–∏ —É–º–µ—Ä–µ–Ω–Ω–æ–º —Ä–∏—Å–∫–µ'
            },
            'current': {
                'price': round(current_price),
                'probability': float(round(current_prob, 3)),
                'income': float(round(current_income, 2)),
                'description': '–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞'
            }
        }