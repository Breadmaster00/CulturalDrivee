import pandas as pd
import numpy as np
from tensorflow.keras.models import load_model
from sklearn.preprocessing import StandardScaler
import os

# ============================
# 1Ô∏è‚É£ –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
# ============================
MODEL_PATH = "price_optimizer_nn_model.h5"
INPUT_CSV = "test.csv"
OUTPUT_CSV = "predictions.csv"

# ============================
# 2Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
# ============================
print("üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å...")
if not os.path.exists(MODEL_PATH):
    raise FileNotFoundError(f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {MODEL_PATH}")

model = load_model(MODEL_PATH, compile=False)
expected_features = model.input_shape[1]
print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –û–∂–∏–¥–∞–µ—Ç {expected_features} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.")

# ============================
# 3Ô∏è‚É£ –ß—Ç–µ–Ω–∏–µ CSV
# ============================
print("üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
df = pd.read_csv(INPUT_CSV)
print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫.")

# ============================
# 4Ô∏è‚É£ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
# ============================
processed_df = df.copy()

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
processed_df['order_timestamp'] = pd.to_datetime(processed_df['order_timestamp'])
processed_df['hour'] = processed_df['order_timestamp'].dt.hour
processed_df['day_of_week'] = processed_df['order_timestamp'].dt.dayofweek
processed_df['month'] = processed_df['order_timestamp'].dt.month
processed_df['is_weekend'] = processed_df['day_of_week'].isin([5, 6]).astype(int)
processed_df['is_night'] = ((processed_df['hour'] >= 23) | (processed_df['hour'] <= 6)).astype(int)

# –ü—Ä–∏–∑–Ω–∞–∫–∏ –ø–æ–µ–∑–¥–∫–∏
processed_df['distance_km'] = processed_df['distance_in_meters'] / 1000
processed_df['duration_min'] = processed_df['duration_in_seconds'] / 60
processed_df['pickup_km'] = processed_df['pickup_in_meters'] / 1000
processed_df['pickup_time_min'] = processed_df['pickup_in_seconds'] / 60

# –†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏
processed_df['speed_kmh'] = processed_df['distance_km'] / (processed_df['duration_min'] / 60 + 1e-5)

# –¶–µ–Ω–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
processed_df['price_increase'] = processed_df['price_bid_local'] - processed_df['price_start_local']
processed_df['price_increase_pct'] = (processed_df['price_bid_local'] / processed_df['price_start_local'] - 1) * 100
processed_df['price_per_km'] = processed_df['price_start_local'] / (processed_df['distance_km'] + 1e-5)

# –ü—Ä–∏–∑–Ω–∞–∫–∏ –≤–æ–¥–∏—Ç–µ–ª—è
processed_df['driver_experience_days'] = (pd.to_datetime(processed_df['order_timestamp']) - 
                                         pd.to_datetime(processed_df['driver_reg_date'])).dt.days
processed_df['driver_rating'] = processed_df['driver_rating'].fillna(4.5)

# –¢–û–ß–ù–û 16 –ü–†–ò–ó–ù–ê–ö–û–í
feature_columns = [
    'hour', 'day_of_week', 'month', 'is_weekend', 'is_night',
    'distance_km', 'duration_min', 'speed_kmh', 'pickup_km', 'pickup_time_min',
    'price_start_local', 'price_bid_local', 'price_increase', 'price_increase_pct',
    'price_per_km', 'driver_rating'
]

for col in feature_columns:
    if col not in processed_df.columns:
        processed_df[col] = 0

X = processed_df[feature_columns].values.astype('float32')
print(f"üìä –§–æ—Ä–º–∞ –¥–∞–Ω–Ω—ã—Ö: {X.shape}")

# ============================
# 5Ô∏è‚É£ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
# ============================
print("üîπ –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º...")
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
predictions = model.predict(X_scaled, verbose=0).flatten()

# ============================
# 6Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
# ============================
print("üîπ –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∫ –∏—Å—Ö–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º...")

# –¢–û–õ–¨–ö–û 3 —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏
df['predicted_acceptance_probability'] = np.round(predictions, 4)
df['predicted_will_accept'] = (predictions > 0.5).astype(int)
df['expected_revenue'] = np.round(df['price_bid_local'] * predictions, 2)

# ============================
# 7Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¢–û–õ–¨–ö–û –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ + –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
# ============================
df.to_csv(OUTPUT_CSV, index=False)

print(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {OUTPUT_CSV}")
print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π:")
print(f"   –°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç–∏—è: {df['predicted_acceptance_probability'].mean():.2%}")
print(f"   –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã—Ö –ø—Ä–∏–Ω—è—Ç–∏–π: {df['predicted_will_accept'].sum()} –∑–∞–ø–∏—Å–µ–π")
print(f"   –°—Ä–µ–¥–Ω–∏–π –æ–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥: {df['expected_revenue'].mean():.0f} ‚ÇΩ")

print("\nüìã –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:")
print("   - predicted_acceptance_probability: –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç–∏—è —Ü–µ–Ω—ã (0-1)")
print("   - predicted_will_accept: –ø—Ä–∏–º–µ—Ç –ª–∏ —Ü–µ–Ω—É (1 = –¥–∞, 0 = –Ω–µ—Ç)")
print("   - expected_revenue: –æ–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥ (—Ü–µ–Ω–∞ √ó –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)")

print("\nüîç –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:")
sample = df[['order_id', 'price_start_local', 'price_bid_local', 'predicted_acceptance_probability', 'expected_revenue']].head()
print(sample.to_string(index=False))