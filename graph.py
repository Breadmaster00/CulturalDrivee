import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from matplotlib.gridspec import GridSpec
import warnings
warnings.filterwarnings('ignore')

class TaxiPriceAnalyzer:
    def __init__(self, file_path):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –¥–ª—è —Ç–∞–∫—Å–∏ –¥–∞–Ω–Ω—ã—Ö
        """
        self.file_path = file_path
        self.df = None
        self.load_data()
    
    def load_data(self):
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Ñ–∞–π–ª–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        try:
            self.df = pd.read_csv(self.file_path)
            print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            print("üìä" + "="*50 + "üìä")
            print(f"üìà –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {self.df.shape[0]:,} —Å—Ç—Ä–æ–∫ √ó {self.df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")
            print(f"üìÖ –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {self.df['order_timestamp'].min()[:10]} - {self.df['order_timestamp'].max()[:10]}")
            
            # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
            print("\nüîç –ü–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö:")
            display(self.df.head(3).style.set_caption("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö"))
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
    
    def prepare_data(self):
        """
        –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        """
        print("\nüîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp –≤ datetime
        datetime_columns = ['order_timestamp', 'tender_timestamp', 'driver_reg_date']
        for col in datetime_columns:
            self.df[col] = pd.to_datetime(self.df[col])
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–∫–∞–∑–∞
        self.df = self.df.sort_values('order_timestamp')
        
        # –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self.df['hour'] = self.df['order_timestamp'].dt.hour
        self.df['day_of_week'] = self.df['order_timestamp'].dt.day_name()
        self.df['date'] = self.df['order_timestamp'].dt.date
        self.df['price_difference'] = self.df['price_bid_local'] - self.df['price_start_local']
        self.df['price_ratio'] = self.df['price_bid_local'] / self.df['price_start_local']
        self.df['distance_km'] = self.df['distance_in_meters'] / 1000
        self.df['pickup_minutes'] = self.df['pickup_in_seconds'] / 60
        self.df['duration_minutes'] = self.df['duration_in_seconds'] / 60
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
        def time_of_day(hour):
            if 5 <= hour < 12: return '–£—Ç—Ä–æ'
            elif 12 <= hour < 17: return '–î–µ–Ω—å'
            elif 17 <= hour < 22: return '–í–µ—á–µ—Ä'
            else: return '–ù–æ—á—å'
        
        self.df['time_of_day'] = self.df['hour'].apply(time_of_day)
        
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã!")
        print(f"üìÖ –ü–æ–ª–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {self.df['order_timestamp'].min().strftime('%d.%m.%Y')} - {self.df['order_timestamp'].max().strftime('%d.%m.%Y')}")
        print(f"üïí –í—Å–µ–≥–æ –¥–Ω–µ–π: {self.df['date'].nunique()}")
    
    def set_style(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Å—Ç–∏–ª—è –¥–ª—è –≤—Å–µ—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        plt.style.use('seaborn-v0_8-whitegrid')
        sns.set_palette("husl")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è –∫—Ä–∞—Å–∏–≤—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
        plt.rcParams['figure.figsize'] = (12, 8)
        plt.rcParams['font.size'] = 12
        plt.rcParams['axes.titlesize'] = 16
        plt.rcParams['axes.titleweight'] = 'bold'
        plt.rcParams['axes.labelsize'] = 14
    
    def create_summary_dashboard(self):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏ —Å –∫–ª—é—á–µ–≤—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
        """
        self.set_style()
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        total_orders = len(self.df)
        completed_orders = len(self.df[self.df['is_done'] == 'done'])
        completion_rate = (completed_orders / total_orders) * 100
        avg_price = self.df['price_bid_local'].mean()
        avg_distance = self.df['distance_km'].mean()
        avg_pickup_time = self.df['pickup_minutes'].mean()
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞—à–±–æ—Ä–¥
        fig = plt.figure(figsize=(16, 10))
        gs = GridSpec(2, 4, figure=fig)
        
        # 1. –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        ax_main = fig.add_subplot(gs[0, :])
        ax_main.axis('off')
        ax_main.text(0.1, 0.8, 'üöï –ê–ù–ê–õ–ò–¢–ò–ö–ê –°–ï–†–í–ò–°–ê –¢–ê–ö–°–ò', 
                    fontsize=24, fontweight='bold', color='#2E86AB')
        ax_main.text(0.1, 0.6, f'–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {self.df["date"].min()} - {self.df["date"].max()}', 
                    fontsize=14, color='#666666')
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        metrics = [
            ('üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤', f'{total_orders:,}', '#A23B72'),
            ('‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ', f'{completed_orders:,} ({completion_rate:.1f}%)', '#18A558'),
            ('üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞', f'{avg_price:.1f}', '#F18F01'),
            ('üìè –°—Ä–µ–¥–Ω—è—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è', f'{avg_distance:.1f} –∫–º', '#C73E1D'),
            ('‚è±Ô∏è –í—Ä–µ–º—è –ø–æ–¥–∞—á–∏', f'{avg_pickup_time:.1f} –º–∏–Ω', '#3E92CC')
        ]
        
        for i, (label, value, color) in enumerate(metrics):
            ax_main.text(0.1 + i*0.18, 0.3, label, fontsize=12, color='#666666')
            ax_main.text(0.1 + i*0.18, 0.2, value, fontsize=16, fontweight='bold', color=color)
        
        # 2. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤
        ax_pie = fig.add_subplot(gs[1, 0])
        status_counts = self.df['is_done'].value_counts()
        colors = ['#18A558', '#C73E1D'] if len(status_counts) == 2 else ['#18A558', '#C73E1D', '#666666']
        wedges, texts, autotexts = ax_pie.pie(status_counts.values, labels=status_counts.index, 
                                             autopct='%1.1f%%', colors=colors, startangle=90)
        ax_pie.set_title('üìä –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–æ–≤', fontweight='bold')
        
        # 3. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
        ax_time = fig.add_subplot(gs[1, 1])
        time_counts = self.df['time_of_day'].value_counts()
        bars = ax_time.bar(time_counts.index, time_counts.values, 
                          color=['#FF9F1C', '#2EC4B6', '#E71D36', '#6A0572'])
        ax_time.set_title('üïí –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫', fontweight='bold')
        ax_time.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        for bar in bars:
            height = bar.get_height()
            ax_time.text(bar.get_x() + bar.get_width()/2., height + 5,
                        f'{height:,}', ha='center', va='bottom')
        
        # 4. –¢–æ–ø –ø–ª–∞—Ç—Ñ–æ—Ä–º
        ax_platform = fig.add_subplot(gs[1, 2])
        platform_counts = self.df['platform'].value_counts().head(5)
        bars = ax_platform.barh(range(len(platform_counts)), platform_counts.values,
                               color=sns.color_palette("viridis", len(platform_counts)))
        ax_platform.set_yticks(range(len(platform_counts)))
        ax_platform.set_yticklabels(platform_counts.index)
        ax_platform.set_title('üè¢ –¢–æ–ø –ø–ª–∞—Ç—Ñ–æ—Ä–º', fontweight='bold')
        ax_platform.set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤')
        
        # 5. –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        ax_week = fig.add_subplot(gs[1, 3])
        day_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
        day_names_ru = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
        weekly_prices = self.df.groupby('day_of_week')['price_bid_local'].mean().reindex(day_order)
        
        ax_week.plot(day_names_ru, weekly_prices.values, marker='o', linewidth=3, 
                    markersize=8, color='#E4572E')
        ax_week.fill_between(day_names_ru, weekly_prices.values, alpha=0.3, color='#E4572E')
        ax_week.set_title('üìà –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏', fontweight='bold')
        ax_week.set_ylabel('–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞')
        ax_week.grid(True, alpha=0.3)
        
        plt.tight_layout()
        plt.show()
    
    def plot_price_analysis(self):
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ü–µ–Ω –≤–æ –≤—Ä–µ–º–µ–Ω–∏
        """
        self.set_style()
        fig = plt.figure(figsize=(18, 12))
        fig.suptitle('üí∞ –ê–Ω–∞–ª–∏–∑ –¥–∏–Ω–∞–º–∏–∫–∏ —Ü–µ–Ω —Ç–∞–∫—Å–∏', fontsize=20, fontweight='bold', y=0.95)
        
        gs = GridSpec(2, 2, figure=fig)
        
        # 1. –î–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–Ω –ø–æ —á–∞—Å–∞–º
        ax1 = fig.add_subplot(gs[0, 0])
        hourly_stats = self.df.groupby('hour').agg({
            'price_start_local': 'mean',
            'price_bid_local': 'mean',
            'price_difference': 'mean'
        }).reset_index()
        
        ax1.plot(hourly_stats['hour'], hourly_stats['price_start_local'], 
                marker='o', linewidth=3, label='üéØ –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞', alpha=0.8, markersize=6)
        ax1.plot(hourly_stats['hour'], hourly_stats['price_bid_local'], 
                marker='s', linewidth=3, label='üí∞ –§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞', alpha=0.8, markersize=6)
        
        ax1.set_title('üìä –°—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ —á–∞—Å–∞–º —Å—É—Ç–æ–∫', fontsize=16, fontweight='bold')
        ax1.set_xlabel('üïí –ß–∞—Å –¥–Ω—è')
        ax1.set_ylabel('üíµ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞')
        ax1.legend(frameon=True, fancybox=True, shadow=True)
        ax1.grid(True, alpha=0.3)
        ax1.set_xticks(range(0, 24, 2))
        ax1.fill_between(hourly_stats['hour'], hourly_stats['price_start_local'], 
                        hourly_stats['price_bid_local'], alpha=0.2)
        
        # 2. –†–∞–∑–Ω–∏—Ü–∞ —Ü–µ–Ω –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        ax2 = fig.add_subplot(gs[0, 1])
        day_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
        day_names_ru = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
        daily_diff = self.df.groupby('day_of_week')['price_difference'].mean().reindex(day_order)
        
        colors = ['lightcoral' if x < 0 else 'lightgreen' for x in daily_diff.values]
        bars = ax2.bar(day_names_ru, daily_diff.values, color=colors, alpha=0.7, edgecolor='black')
        
        ax2.set_title('üìà –†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Ü–µ–Ω–æ–π', fontsize=16, fontweight='bold')
        ax2.set_xlabel('–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏')
        ax2.set_ylabel('–†–∞–∑–Ω–∏—Ü–∞ —Ü–µ–Ω')
        ax2.tick_params(axis='x', rotation=45)
        ax2.grid(True, alpha=0.3)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
        for bar, value in zip(bars, daily_diff.values):
            height = bar.get_height()
            ax2.text(bar.get_x() + bar.get_width()/2., height,
                    f'{value:+.1f}', ha='center', va='bottom' if value > 0 else 'top',
                    fontweight='bold', fontsize=10)
        
        # 3. –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ü–µ–Ω—ã –æ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        ax3 = fig.add_subplot(gs[1, 0])
        scatter = ax3.scatter(self.df['distance_km'], self.df['price_bid_local'],
                            c=self.df['duration_minutes'], alpha=0.6, 
                            cmap='viridis', s=50)
        ax3.set_title('üìè –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ü–µ–Ω—ã –æ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –∏ –≤—Ä–µ–º–µ–Ω–∏', fontsize=16, fontweight='bold')
        ax3.set_xlabel('–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∫–º)')
        ax3.set_ylabel('–§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞')
        cbar = plt.colorbar(scatter, ax=ax3)
        cbar.set_label('–í—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏ (–º–∏–Ω—É—Ç—ã)')
        ax3.grid(True, alpha=0.3)
        
        # 4. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω
        ax4 = fig.add_subplot(gs[1, 1])
        n, bins, patches = ax4.hist(self.df['price_bid_local'], bins=30, alpha=0.7, 
                                   color='lightgreen', edgecolor='black', density=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏–∏ —Å—Ä–µ–¥–Ω–µ–≥–æ –∏ –º–µ–¥–∏–∞–Ω—ã
        mean_price = self.df['price_bid_local'].mean()
        median_price = self.df['price_bid_local'].median()
        
        ax4.axvline(mean_price, color='red', linestyle='--', linewidth=2, 
                   label=f'–°—Ä–µ–¥–Ω–µ–µ: {mean_price:.1f}')
        ax4.axvline(median_price, color='blue', linestyle='--', linewidth=2, 
                   label=f'–ú–µ–¥–∏–∞–Ω–∞: {median_price:.1f}')
        
        ax4.set_title('üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω –∑–∞–∫–∞–∑–æ–≤', fontsize=16, fontweight='bold')
        ax4.set_xlabel('–§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞')
        ax4.set_ylabel('–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏')
        ax4.legend()
        ax4.grid(True, alpha=0.3)
        
        plt.tight_layout()
        plt.show()
    
    def plot_platform_comparison(self):
        """
        –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º
        """
        self.set_style()
        fig = plt.figure(figsize=(18, 12))
        fig.suptitle('üè¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–∞–∫—Å–∏-–ø–ª–∞—Ç—Ñ–æ—Ä–º', fontsize=20, fontweight='bold', y=0.95)
        
        gs = GridSpec(2, 2, figure=fig)
        
        # 1. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
        ax1 = fig.add_subplot(gs[0, 0])
        platform_stats = self.df.groupby('platform').agg({
            'price_start_local': 'mean',
            'price_bid_local': 'mean',
            'is_done': lambda x: (x == 'done').mean() * 100
        }).round(2).sort_values('price_bid_local', ascending=False)
        
        x_pos = np.arange(len(platform_stats.index))
        width = 0.35
        
        bars1 = ax1.bar(x_pos - width/2, platform_stats['price_start_local'], 
                       width, label='üéØ –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞', alpha=0.7, color='#FF6B6B')
        bars2 = ax1.bar(x_pos + width/2, platform_stats['price_bid_local'], 
                       width, label='üí∞ –§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞', alpha=0.7, color='#4ECDC4')
        
        ax1.set_title('üíµ –°—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º', fontsize=16, fontweight='bold')
        ax1.set_xlabel('–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞')
        ax1.set_ylabel('–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞')
        ax1.set_xticks(x_pos)
        ax1.set_xticklabels(platform_stats.index, rotation=45, ha='right')
        ax1.legend()
        ax1.grid(True, alpha=0.3)
        
        # 2. –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
        ax2 = fig.add_subplot(gs[0, 1])
        completion_data = platform_stats['is_done'].sort_values(ascending=False)
        colors = plt.cm.RdYlGn(completion_data / 100)
        
        bars = ax2.bar(completion_data.index, completion_data.values, color=colors, alpha=0.7)
        ax2.set_title('‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤', fontsize=16, fontweight='bold')
        ax2.set_xlabel('–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞')
        ax2.set_ylabel('–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (%)')
        ax2.tick_params(axis='x', rotation=45)
        ax2.grid(True, alpha=0.3)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        for bar, value in zip(bars, completion_data.values):
            height = bar.get_height()
            ax2.text(bar.get_x() + bar.get_width()/2., height + 1,
                    f'{value:.1f}%', ha='center', va='bottom', fontweight='bold')
        
        # 3. Boxplot —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–Ω
        ax3 = fig.add_subplot(gs[1, 0])
        platform_data = [self.df[self.df['platform'] == platform]['price_bid_local'] 
                        for platform in self.df['platform'].unique()]
        
        boxplot = ax3.boxplot(platform_data, labels=self.df['platform'].unique(),
                             patch_artist=True)
        
        # –†–∞—Å–∫—Ä–∞—à–∏–≤–∞–µ–º boxplot
        colors = plt.cm.Set3(np.linspace(0, 1, len(platform_data)))
        for patch, color in zip(boxplot['boxes'], colors):
            patch.set_facecolor(color)
        
        ax3.set_title('üì¶ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º', fontsize=16, fontweight='bold')
        ax3.set_xlabel('–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞')
        ax3.set_ylabel('–§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞')
        ax3.tick_params(axis='x', rotation=45)
        ax3.grid(True, alpha=0.3)
        
        # 4. –í—Ä–µ–º—è –ø–æ–¥–∞—á–∏ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
        ax4 = fig.add_subplot(gs[1, 1])
        pickup_stats = self.df.groupby('platform')['pickup_minutes'].agg(['mean', 'std']).sort_values('mean')
        
        y_pos = np.arange(len(pickup_stats.index))
        ax4.barh(y_pos, pickup_stats['mean'], xerr=pickup_stats['std'], 
                alpha=0.7, color='#6A0572', capsize=5)
        
        ax4.set_title('‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ–¥–∞—á–∏ —Ç–∞–∫—Å–∏', fontsize=16, fontweight='bold')
        ax4.set_xlabel('–í—Ä–µ–º—è –ø–æ–¥–∞—á–∏ (–º–∏–Ω—É—Ç—ã)')
        ax4.set_yticks(y_pos)
        ax4.set_yticklabels(pickup_stats.index)
        ax4.grid(True, alpha=0.3)
        
        plt.tight_layout()
        plt.show()
    
    def plot_car_model_analysis(self):
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –º–æ–¥–µ–ª—è–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        """
        self.set_style()
        fig = plt.figure(figsize=(16, 10))
        fig.suptitle('üöó –ê–Ω–∞–ª–∏–∑ –ø–æ –º–æ–¥–µ–ª—è–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏ —Ä–µ–π—Ç–∏–Ω–≥—É –≤–æ–¥–∏—Ç–µ–ª–µ–π', 
                    fontsize=20, fontweight='bold', y=0.95)
        
        gs = GridSpec(1, 2, figure=fig)
        
        # 1. –¢–æ–ø –º–æ–¥–µ–ª–µ–π –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ —Ü–µ–Ω–∞–º
        ax1 = fig.add_subplot(gs[0, 0])
        top_carmodels = self.df['carmodel'].value_counts().head(10).index
        carmodel_data = self.df[self.df['carmodel'].isin(top_carmodels)]
        
        carmodel_stats = carmodel_data.groupby('carmodel').agg({
            'price_bid_local': ['mean', 'count'],
            'driver_rating': 'mean'
        }).round(2)
        carmodel_stats.columns = ['mean_price', 'order_count', 'mean_rating']
        carmodel_stats = carmodel_stats.sort_values('mean_price', ascending=True)
        
        # –°–æ–∑–¥–∞–µ–º scatter plot —Å —Ä–∞–∑–º–µ—Ä–æ–º —Ç–æ—á–µ–∫ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–∫–∞–∑–æ–≤
        scatter = ax1.scatter(carmodel_stats['mean_price'], carmodel_stats.index,
                             s=carmodel_stats['order_count']/10, 
                             c=carmodel_stats['mean_rating'], cmap='RdYlGn', 
                             alpha=0.7, edgecolors='black')
        
        ax1.set_title('üíé –°—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ –º–æ–¥–µ–ª—è–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π\n(—Ä–∞–∑–º–µ—Ä —Ç–æ—á–∫–∏ = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤)', 
                     fontsize=16, fontweight='bold')
        ax1.set_xlabel('–°—Ä–µ–¥–Ω—è—è —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞')
        ax1.grid(True, alpha=0.3)
        
        cbar = plt.colorbar(scatter, ax=ax1)
        cbar.set_label('–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –≤–æ–¥–∏—Ç–µ–ª—è')
        
        # 2. –í–ª–∏—è–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤–æ–¥–∏—Ç–µ–ª—è
        ax2 = fig.add_subplot(gs[0, 1])
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã —Ä–µ–π—Ç–∏–Ω–≥–∞
        self.df['rating_group'] = pd.cut(self.df['driver_rating'], 
                                       bins=[0, 3.0, 3.5, 4.0, 4.5, 5.0],
                                       labels=['<3.0', '3.0-3.5', '3.5-4.0', '4.0-4.5', '4.5-5.0'])
        
        rating_stats = self.df.groupby('rating_group').agg({
            'price_bid_local': 'mean',
            'is_done': lambda x: (x == 'done').mean() * 100,
            'pickup_minutes': 'mean'
        }).dropna()
        
        x_pos = np.arange(len(rating_stats.index))
        width = 0.25
        
        # –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã
        bars1 = ax2.bar(x_pos - width, rating_stats['price_bid_local'], width,
                       label='üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞', alpha=0.7, color='#2E86AB')
        ax2.set_ylabel('–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞', color='#2E86AB')
        ax2.tick_params(axis='y', labelcolor='#2E86AB')
        
        # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞ –≤—Ç–æ—Ä–æ–π –æ—Å–∏
        ax2b = ax2.twinx()
        bars2 = ax2b.bar(x_pos + width, rating_stats['is_done'], width,
                        label='‚úÖ % –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è', alpha=0.7, color='#A23B72')
        ax2b.set_ylabel('–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (%)', color='#A23B72')
        ax2b.tick_params(axis='y', labelcolor='#A23B72')
        
        ax2.set_title('üìä –í–ª–∏—è–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤–æ–¥–∏—Ç–µ–ª—è', fontsize=16, fontweight='bold')
        ax2.set_xlabel('–ì—Ä—É–ø–ø–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤–æ–¥–∏—Ç–µ–ª—è')
        ax2.set_xticks(x_pos)
        ax2.set_xticklabels(rating_stats.index)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ª–µ–≥–µ–Ω–¥—ã
        lines1, labels1 = ax2.get_legend_handles_labels()
        lines2, labels2 = ax2b.get_legend_handles_labels()
        ax2.legend(lines1 + lines2, labels1 + labels2, loc='upper left')
        
        plt.tight_layout()
        plt.show()
    
    def plot_completion_analysis(self):
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
        """
        self.set_style()
        fig = plt.figure(figsize=(18, 12))
        fig.suptitle('üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤', fontsize=20, fontweight='bold', y=0.95)
        
        gs = GridSpec(2, 2, figure=fig)
        
        completed = self.df[self.df['is_done'] == 'done']
        canceled = self.df[self.df['is_done'] == 'cancel']
        
        # 1. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
        ax1 = fig.add_subplot(gs[0, 0])
        metrics = ['price_bid_local', 'distance_km', 'pickup_minutes', 'duration_minutes']
        metric_names = ['–¶–µ–Ω–∞', '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∫–º)', '–í—Ä–µ–º—è –ø–æ–¥–∞—á–∏ (–º–∏–Ω)', '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω)']
        
        completed_means = [completed[metric].mean() for metric in metrics]
        canceled_means = [canceled[metric].mean() for metric in metrics]
        
        x_pos = np.arange(len(metrics))
        width = 0.35
        
        bars1 = ax1.bar(x_pos - width/2, completed_means, width, 
                       label='‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ', color='#18A558', alpha=0.7)
        bars2 = ax1.bar(x_pos + width/2, canceled_means, width, 
                       label='‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ', color='#C73E1D', alpha=0.7)
        
        ax1.set_title('üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫', fontsize=16, fontweight='bold')
        ax1.set_xlabel('–ú–µ—Ç—Ä–∏–∫–∞')
        ax1.set_ylabel('–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
        ax1.set_xticks(x_pos)
        ax1.set_xticklabels(metric_names, rotation=45, ha='right')
        ax1.legend()
        ax1.grid(True, alpha=0.3)
        
        # 2. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
        ax2 = fig.add_subplot(gs[0, 1])
        max_distance = min(self.df['distance_km'].quantile(0.95), 50)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –ª—É—á—à–µ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        filtered_data = self.df[self.df['distance_km'] <= max_distance]
        
        completed_filtered = filtered_data[filtered_data['is_done'] == 'done']
        canceled_filtered = filtered_data[filtered_data['is_done'] == 'cancel']
        
        ax2.hist([completed_filtered['distance_km'], canceled_filtered['distance_km']],
                bins=20, alpha=0.7, label=['‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ', '‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ'],
                color=['#18A558', '#C73E1D'], edgecolor='black', density=True)
        ax2.set_title('üìè –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –ø–æ–µ–∑–¥–æ–∫', fontsize=16, fontweight='bold')
        ax2.set_xlabel('–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∫–º)')
        ax2.set_ylabel('–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏')
        ax2.legend()
        ax2.grid(True, alpha=0.3)
        
        # 3. –í—Ä–µ–º—è –ø–æ–¥–∞—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É
        ax3 = fig.add_subplot(gs[1, 0])
        max_pickup = min(self.df['pickup_minutes'].quantile(0.95), 30)
        filtered_pickup = self.df[self.df['pickup_minutes'] <= max_pickup]
        
        completed_pickup = filtered_pickup[filtered_pickup['is_done'] == 'done']
        canceled_pickup = filtered_pickup[filtered_pickup['is_done'] == 'cancel']
        
        ax3.hist([completed_pickup['pickup_minutes'], canceled_pickup['pickup_minutes']],
                bins=15, alpha=0.7, label=['‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ', '‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ'],
                color=['#18A558', '#C73E1D'], edgecolor='black', density=True)
        ax3.set_title('‚è±Ô∏è –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥–∞—á–∏ —Ç–∞–∫—Å–∏', fontsize=16, fontweight='bold')
        ax3.set_xlabel('–í—Ä–µ–º—è –ø–æ–¥–∞—á–∏ (–º–∏–Ω—É—Ç—ã)')
        ax3.set_ylabel('–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏')
        ax3.legend()
        ax3.grid(True, alpha=0.3)
        
        # 4. –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ —á–∞—Å–∞–º
        ax4 = fig.add_subplot(gs[1, 1])
        hourly_completion = self.df.groupby('hour')['is_done'].apply(
            lambda x: (x == 'done').mean() * 100
        )
        
        line = ax4.plot(hourly_completion.index, hourly_completion.values, 
                       marker='o', linewidth=3, markersize=6, color='#6A0572')
        ax4.fill_between(hourly_completion.index, hourly_completion.values, 
                        alpha=0.3, color='#6A0572')
        ax4.axhline(50, color='red', linestyle='--', alpha=0.7, 
                   label='–ü–æ—Ä–æ–≥ 50%')
        
        # –ó–∞–∫—Ä–∞—à–∏–≤–∞–µ–º –æ–±–ª–∞—Å—Ç–∏ –≤—ã—à–µ –∏ –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞
        ax4.fill_between(hourly_completion.index, hourly_completion.values, 50,
                        where=(hourly_completion.values >= 50), 
                        color='green', alpha=0.2, interpolate=True)
        ax4.fill_between(hourly_completion.index, hourly_completion.values, 50,
                        where=(hourly_completion.values < 50), 
                        color='red', alpha=0.2, interpolate=True)
        
        ax4.set_title('üïí –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ —á–∞—Å–∞–º', fontsize=16, fontweight='bold')
        ax4.set_xlabel('–ß–∞—Å –¥–Ω—è')
        ax4.set_ylabel('–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (%)')
        ax4.set_xticks(range(0, 24, 2))
        ax4.legend()
        ax4.grid(True, alpha=0.3)
        ax4.set_ylim(0, 100)
        
        plt.tight_layout()
        plt.show()
    
    def comprehensive_analysis(self):
        """
        –ü–æ–ª–Ω—ã–π —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
        """
        print("üöï" + "="*60 + "üöï")
        print("           –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –¢–ê–ö–°–ò")
        print("üöï" + "="*60 + "üöï")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        self.prepare_data()
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å
        self.create_summary_dashboard()
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\nüìä" + "="*50 + "üìä")
        print("–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print("="*50)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        total_orders = len(self.df)
        completed = len(self.df[self.df['is_done'] == 'done'])
        canceled = len(self.df[self.df['is_done'] == 'cancel'])
        completion_rate = (completed / total_orders) * 100
        
        stats_data = {
            '–ú–µ—Ç—Ä–∏–∫–∞': [
                'üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤',
                '‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤', 
                '‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤',
                'üìà –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è',
                'üí∞ –°—Ä–µ–¥–Ω—è—è —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞',
                'üéØ –°—Ä–µ–¥–Ω—è—è —Å—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞',
                'üìè –°—Ä–µ–¥–Ω—è—è —Ä–∞–∑–Ω–∏—Ü–∞ —Ü–µ–Ω',
                'üõ£Ô∏è –°—Ä–µ–¥–Ω–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ',
                '‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ–¥–∞—á–∏',
                '‚è≥ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'
            ],
            '–ó–Ω–∞—á–µ–Ω–∏–µ': [
                f'{total_orders:,}',
                f'{completed:,}',
                f'{canceled:,}',
                f'{completion_rate:.1f}%',
                f'{self.df["price_bid_local"].mean():.2f}',
                f'{self.df["price_start_local"].mean():.2f}',
                f'{self.df["price_difference"].mean():.2f}',
                f'{self.df["distance_km"].mean():.2f} –∫–º',
                f'{self.df["pickup_minutes"].mean():.1f} –º–∏–Ω',
                f'{self.df["duration_minutes"].mean():.1f} –º–∏–Ω'
            ]
        }
        
        stats_df = pd.DataFrame(stats_data)
        display(stats_df.style.set_caption("üìà –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–∞").hide_index())
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
        print("\nüè¢" + "="*50 + "üè¢")
        print("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ü–õ–ê–¢–§–û–†–ú–ê–ú:")
        print("="*50)
        
        platform_analysis = self.df.groupby('platform').agg({
            'price_bid_local': ['mean', 'std', 'count'],
            'is_done': lambda x: (x == 'done').mean() * 100,
            'distance_km': 'mean',
            'pickup_minutes': 'mean'
        }).round(2)
        
        platform_analysis.columns = ['–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞', '–°—Ç–¥ —Ü–µ–Ω–∞', '–ö–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤', 
                                   '% –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è', '–°—Ä. —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ', '–°—Ä. –≤—Ä–µ–º—è –ø–æ–¥–∞—á–∏']
        platform_analysis = platform_analysis.sort_values('–ö–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤', ascending=False)
        
        display(platform_analysis.style.set_caption("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º").format({
            '% –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è': '{:.1f}%',
            '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞': '{:.2f}',
            '–°—Ä. —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ': '{:.2f} –∫–º',
            '–°—Ä. –≤—Ä–µ–º—è –ø–æ–¥–∞—á–∏': '{:.1f} –º–∏–Ω'
        }))
        
        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        print("\nüìà" + "="*50 + "üìà")
        print("–í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø –î–ê–ù–ù–´–•:")
        print("="*50)
        
        self.plot_price_analysis()
        self.plot_platform_comparison()
        self.plot_car_model_analysis()
        self.plot_completion_analysis()
        
        print("\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –í—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—ã—à–µ.")

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É CSV —Ñ–∞–π–ª—É
    file_path = "train.csv"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—É—Ç—å
    
    analyzer = TaxiPriceAnalyzer(file_path)
    analyzer.comprehensive_analysis()